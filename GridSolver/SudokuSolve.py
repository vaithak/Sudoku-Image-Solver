# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_SudokuSolve', [dirname(__file__)])
        except ImportError:
            import _SudokuSolve
            return _SudokuSolve
        if fp is not None:
            try:
                _mod = imp.load_module('_SudokuSolve', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _SudokuSolve = swig_import_helper()
    del swig_import_helper
else:
    import _SudokuSolve
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



_SudokuSolve.UNASSIGNED_swigconstant(_SudokuSolve)
UNASSIGNED = _SudokuSolve.UNASSIGNED
class Sudoku(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Sudoku, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Sudoku, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _SudokuSolve.new_Sudoku(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def createSeed(self):
        return _SudokuSolve.Sudoku_createSeed(self)

    def printGrid(self):
        return _SudokuSolve.Sudoku_printGrid(self)

    def solveGrid(self):
        return _SudokuSolve.Sudoku_solveGrid(self)

    def getGrid(self):
        return _SudokuSolve.Sudoku_getGrid(self)

    def countSoln(self, number):
        return _SudokuSolve.Sudoku_countSoln(self, number)

    def genPuzzle(self):
        return _SudokuSolve.Sudoku_genPuzzle(self)

    def verifyGridStatus(self):
        return _SudokuSolve.Sudoku_verifyGridStatus(self)

    def printSVG(self, arg2):
        return _SudokuSolve.Sudoku_printSVG(self, arg2)

    def calculateDifficulty(self):
        return _SudokuSolve.Sudoku_calculateDifficulty(self)

    def branchDifficultyScore(self):
        return _SudokuSolve.Sudoku_branchDifficultyScore(self)
    __swig_destroy__ = _SudokuSolve.delete_Sudoku
    __del__ = lambda self: None
Sudoku_swigregister = _SudokuSolve.Sudoku_swigregister
Sudoku_swigregister(Sudoku)


def genRandNum(maxLimit):
    return _SudokuSolve.genRandNum(maxLimit)
genRandNum = _SudokuSolve.genRandNum

def FindUnassignedLocation(grid, row, col):
    return _SudokuSolve.FindUnassignedLocation(grid, row, col)
FindUnassignedLocation = _SudokuSolve.FindUnassignedLocation

def UsedInRow(grid, row, num):
    return _SudokuSolve.UsedInRow(grid, row, num)
UsedInRow = _SudokuSolve.UsedInRow

def UsedInCol(grid, col, num):
    return _SudokuSolve.UsedInCol(grid, col, num)
UsedInCol = _SudokuSolve.UsedInCol

def UsedInBox(grid, boxStartRow, boxStartCol, num):
    return _SudokuSolve.UsedInBox(grid, boxStartRow, boxStartCol, num)
UsedInBox = _SudokuSolve.UsedInBox

def isSafe(grid, row, col, num):
    return _SudokuSolve.isSafe(grid, row, col, num)
isSafe = _SudokuSolve.isSafe

def main(argc, argv):
    return _SudokuSolve.main(argc, argv)
main = _SudokuSolve.main
# This file is compatible with both classic and new-style classes.


